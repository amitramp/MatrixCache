makeCacheMatrix <- function(x = matrix()) {
  inv <- NULL  # Initialize the inverse property
  
  # Method to set the matrix
  set <- function(y) {
    x <<- y
    inv <<- NULL  # Reset the inverse cache when the matrix is set
  }
  
  # Method to get the matrix
  get <- function() x
  
  # Method to set the inverse
  setInverse <- function(inverse) inv <<- inverse
  
  # Method to get the inverse
  getInverse <- function() inv
  
  # Return a list of the methods
  list(set = set, get = get,
       setInverse = setInverse,
       getInverse = getInverse)
}

cacheSolve <- function(x, ...) {
  # Check if the inverse is already cached
  inv <- x$getInverse()
  if(!is.null(inv)) {
    message("getting cached data")
    return(inv)  # Return the cached inverse
  }
  
  # If not cached, compute the inverse
  data <- x$get()
  inv <- solve(data, ...)
  x$setInverse(inv)  # Cache the inverse for future use
  
  inv  # Return the computed inverse
}
